{"version":3,"sources":["components/charts.jsx","components/records.jsx","components/search.jsx","App.js","serviceWorker.js","index.js"],"names":["ResultChart","props","state","data","isLoading","error","this","setState","axios","get","result","results","message","platforms","fake_news","real_news","Object","keys","forEach","key","push","options","title","text","chart","type","series","name","color","credits","xAxis","categories","yAxis","min","max","labels","formatter","value","plotOptions","column","dataLabels","enabled","style","textOutline","y","stacking","tooltip","highcharts","Highcharts","Component","Records","console","log","map","index","date_added","fraud_probability","id","platform","url","sentiments","className","renderTableData","Search","search","percentage","loading","e","target","currentComponent","preventDefault","formFields","post","then","response","_results","catch","analysis","sentimentList","sentiment","class","Spinner","animation","variant","placeholder","onChange","inputChangeHandler","call","onClick","formHandler","bind","App","href","src","alt","scrollTargetIds","activeNavClass","offset","data-toggle","data-target","aria-controls","aria-expanded","aria-label","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7efa1604.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport Highcharts from 'highcharts'\nimport HighchartsReact from 'highcharts-react-official'\nimport axios from 'axios';\n\nclass ResultChart extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: [],\n      isLoading: false,\n      error: null,\n    };\n  }\n \n  async componentDidMount() {\n    this.setState({isLoading : true});\n    try {\n      const result = await axios.get('/api/results');\n      this.setState({ data : result.data.results, isLoading: false});\n    }\n    catch (error) {\n      this.setState({ error, isLoading: false});\n    }\n  }\n\n  render() {\n    const { data, isLoading, error } = this.state;\n\n    if (error) {\n      return <p>{error.message}</p>;\n    }\n\n    if (isLoading) {\n      return <p>Loading ...</p>;\n    }\n\n    // TODO: To refactor\n    let platforms = []; let fake_news = [];  let real_news = [];\n    Object.keys(data).forEach(function(key) {\n      platforms.push(data[key]['platform']);\n      fake_news.push(data[key]['fake_news']);\n      real_news.push(data[key]['real_news']);\n    });\n\n    const options = {\n      title: { text: 'Number of falsehoods in the various social media platforms' },\n      chart : { type: 'column'},\n      series: [ \n        { name: 'Fake News', color: '#FB9039', data: fake_news },\n        { name: 'Real News', color: '#1F3044', data: real_news }\n      ],\n      \n      credits: false,\n      \n      xAxis: { categories: platforms},\n      yAxis: { min: 0, max: 100, title: { text: 'Percentage of Fake/Real News' }, labels: { formatter: function() { return this.value + '%'; } }},\n      \n      plotOptions: { \n        column: { \n          dataLabels: { enabled: true, style: { textOutline: false }, formatter: function() { return this.y + '%'; } },\n                stacking: 'normal',\n        },\n\n\n      },\n      tooltip: { formatter: function() { return this.series.name + \": \" + this.y + \"%\"; }},\n    }\n    \n    return ( \n      <HighchartsReact\n      highcharts={Highcharts}\n      options={options}\n    />)\n  }\n}\n\nexport default ResultChart;","import React, {Component} from 'react';\nimport axios from 'axios';\n\nclass Records extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: [],\n      isLoading: false,\n      error: null,\n    };\n  }\n \n  async componentDidMount() {\n    this.setState({isLoading : true});\n    try {\n      const result = await axios.get('/api/history');\n      console.log(result)\n      this.setState({ data : result.data, isLoading: false});\n    }\n    catch (error) {\n      this.setState({ error, isLoading: false});\n    }\n  }\n\n  renderTableData() {\n    return this.state.data.map((data, index) => {\n       const { date_added, fraud_probability, id, platform, text, url, sentiments } = data //destructuring\n       return (\n          <tr key={id}>\n             <td>{platform}</td>\n             <td>{url}</td>\n             {/* <td>{text}</td> */}\n             <td>{sentiments}</td>\n             <td>{fraud_probability}%</td>\n             <td>{date_added}</td>\n          </tr>\n       )\n    })\n }\n\n\n  render() {\n    const { data, isLoading, error } = this.state;\n\n    if (error) {\n      return <p>{error.message}</p>;\n    }\n\n    if (isLoading) {\n      return <p>Loading ...</p>;\n    }\n\n    return ( \n        <div className = 'table-responsive'>\n          <table id='history' className = 'table-hover table' >\n              <tbody>\n              <tr>\n                {/* Maybe make this dynamic? */}\n                <th>Platform</th>\n                <th>URL</th>\n                {/* <th>Text</th> */}\n                <th>Sentiments</th>\n                <th>Falsehood (%)</th>\n                <th>Date Added</th>\n              </tr>\n                {this.renderTableData()}\n              </tbody>\n          </table>\n        </div>\n    )\n  }\n}\n\nexport default Records;","import React, { Component } from 'react';\nimport Spinner from 'react-bootstrap/Spinner'\nimport axios from 'axios';\nimport './../App.css';\n\nclass Search extends Component {\n    constructor(props) {\n        super(props);\n        this.state = { \n            search: '',\n            results: '',            \n            url: '',\n            percentage: 0,\n            loading: false,\n            sentiments: ['hate speech', 'partisan views']\n        }\n    }\n    inputChangeHandler(e) {\n        this.setState({search: e.target.value });\n    }\n\n    formHandler(e) {\n        let currentComponent = this;\n        currentComponent.setState({loading: true});\n        e.preventDefault();\n        const formFields = this.state;\n        axios.post('/api/evaluate', formFields)\n            .then(function(response) {\n                const _results = response.data;\n                currentComponent.setState({loading: false})\n                currentComponent.setState({results: _results.results})\n                currentComponent.setState({url: _results.url})\n            })\n            .catch(function(error){\n                currentComponent.setState({loading: false})\n                currentComponent.setState({results: error})\n            })\n        ;\n    }\n\n    render() {\n        let analysis;\n        if (!this.state.results == \"\")\n        {\n\n            const sentimentList =  this.state.sentiments;\n            // Let's show certain elements only when used  \n            analysis = \n                <div>\n                    <hr className = \"mb-3\"></hr>\n                    <h3 className=\"mb-2\">Your result </h3> \n                    <h4>Link Entered: </h4>\n                    <p>{this.state.url}</p>\n                    <h4>Text: </h4>\n                    <p>{this.state.results}</p>\n                    <h4>Falsehood Probability: </h4>\n                    <p>{this.state.percentage}%</p>\n                    <h4>Sentiments: </h4>\n                    {/* Display tag for sentiments. TODO: Classify colors based on sentiment */}\n                    {   sentimentList.map(function(sentiment) {\n                        return <span class=\"badge badge-danger p-2 mr-1 mb-3\">{sentiment}</span>\n                    })}\n                    <h4>What do you think?</h4>\n                    <button class = \"btn badge badge-success p-2 mr-1 mb-3\">Excellent!</button>\n                    <button class = \"btn badge badge-warning p-2 mr-1 mb-3\">More work to be done!</button>\n                    <button class = \"btn badge badge-dark p-2 mr-1 mb-3\">Terrible!</button>\n                </div>\n        }\n        if (this.state.loading) {\n            analysis = \n            <div>\n                <hr className = \"mb-3\"></hr>\n                <h3 className=\"mb-2\">Your result </h3> \n                <Spinner animation=\"grow\" variant=\"dark\">\n                <span className=\"sr-only\">Loading...</span>\n                </Spinner>\n            </div>\n        }\n        return(\n            <div>\n                <div className=\"input-group\">\n                        <input type=\"text\" name=\"search\" className=\"form-control\" placeholder=\"Validate your results today!\" onChange={(e) => this.inputChangeHandler.call(this, e)} value={this.state.search} />\n                        <span><button type=\"submit\" className = \"btn btn-primary\" onClick = {this.formHandler.bind(this)}><i className=\"fa fa-search\"></i></button></span>\n                </div> \n                {analysis}\n            </div>\n        );\n    }\n  }\n  \n  export default Search;","import React from 'react';\nimport './App.css';\n// Import charts\nimport ResultChart from './components/charts.jsx';\nimport Records from './components/records.jsx';\nimport Search from './components/search.jsx';\nimport Highcharts from 'highcharts/highstock'\nimport ScrollspyNav from 'react-scrollspy-nav';\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className=\"container-fluid p-0\" >\n        <section className=\"site-section p-3 p-lg-5 d-flex align-items-center\" id=\"about\">\n          <div className=\"w-100\">\n            <div className = \"mb-5\"></div>\n            <h1 className=\"mb-3\">pofma.\n              <span className=\"text-primary\">me</span>\n            </h1>\n            <div className=\"subheading mb-5\">\n              a rumour detection platform which seeks to identify falsehoods that are widely witnessed in social media.\n            </div>\n            <div className=\"subheading mb-5\">\n          <p className=\"lead mb-5\">\n            With online falsehood creating distrust and unnecessary panic in our society, a social media rumour detection platform is needed to steer users away from the dissemination of fake news. \n            As a result, a rumour detection platform is created in hopes to address these concerns and reduce the amount of falsehood perpetuated in the world today.\n          </p>\n          </div>\n          <p className=\"subheading mb-5\"></p>\n            <Search />\n          <hr className=\"mb-2\"></hr>\n            <div className=\"social-icons\">\n              <a href=\"mailto:hello@lesliecallum.com\">\n                <i className=\"fa fa-envelope\"></i>\n              </a>\n            </div>\n          </div>\n        </section>\n      </div>\n\n      <hr className=\"m-0\"></hr>\n      <section className=\"site-section p-3 p-lg-5 d-flex justify-content-center\" id=\"methodology\">\n      <div className=\"w-100\">\n          <h2 className=\"mb-5\">methodology</h2>\n            <div className=\"site-item d-flex flex-column flex-md-row justify-content-between mb-5\">\n              <div className=\"site-content\">\n                <img src=\"img/concept.png\" alt=\"framework\" className=\"responsive mb-4\"></img>\n                <h4 className=\"mb-4 center\">A React and Flask Framework</h4>\n                <div className = \"subheading m-3\"><h3>the process</h3></div>\n                <hr></hr>\n                <ol className = \"mb-4\">\n                  <li>The web application first sends a request to Flask. </li>\n                  <li>Flask then communicates with the backend python modules with the parameters of the request. </li>\n                  <li>The backend modules then process the requests, and if necessary, pulls the data from the database.  </li>\n                  <li>If data is needed from the database, the data will be returned to the backend python modules. </li>\n                  <li>The backend modules then return the results to flask. </li>\n                  <li>Flask then returns the results in a JSON payload. </li>\n                  <li>The web application proceeds to parse the JSON string and visualise the results. </li>\n                </ol>\n              <div className = \"subheading m-3\"><h3>current limitations</h3></div>\n              <hr></hr>\n              <ol>\n                <li>The supported social media platforms as of now are: Facebook, Instagram, and Twitter.</li>\n                <li>The machine learning model are not updated on the fly but rather updated periodically due to the overheads and the ambiguity involved.</li>\n              </ol>\n              </div>\n              \n            </div>\n      </div>\n      </section>\n      <hr className=\"m-0\"></hr>\n      <section className=\"site-section p-3 p-lg-5 d-flex align-items-left\" id=\"statistics\">\n        <div className=\"w-100\">\n              <h2 className=\"mb-5\">Statistics</h2>\n              <ResultChart highcharts={Highcharts} />\n             <i>Only news that are classified with 70% probability threshold are part of the tabulation for fake news. </i> \n          </div>\n      </section>\n      <hr className=\"m-0\"></hr>\n      <section className=\"site-section p-3 p-lg-5 d-flex align-items-left\" id=\"records\">\n        <div className=\"w-100\">\n          <h2 className=\"mb-5\">Past Analyses</h2>\n          <Records />\n        </div>\n      </section>\n      \n    <ScrollspyNav scrollTargetIds ={ ['about', 'methodology', 'statistics', 'records'] } activeNavClass= \"active\" offset={0} ></ScrollspyNav>\n      <nav className=\"navbar navbar-expand-lg navbar-dark bg-primary fixed-top\" id=\"sideNav\">\n        <a className=\"navbar-brand\" href=\"#page-top\">\n        <span className=\"d-block d-lg-none\">pofma checker</span>\n        <span className=\"d-none d-lg-block\">\n            <img className=\"img-fluid img-profile rounded-circle mx-auto mb-2\" src=\"img/logo.png\"></img>\n        </span>\n        </a>\n        <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n          <span className=\"navbar-toggler-icon\"></span>\n        </button>\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n          <ul className=\"navbar-nav\">\n            <li className=\"nav-item\">\n              <a className=\"nav-link active\" href=\"#about\">About</a>\n            </li>\n            <li className=\"nav-item\">\n              <a className=\"nav-link\" href=\"#methodology\">Methodology</a>\n            </li>\n            <li className=\"nav-item\">\n              <a className=\"nav-link\" href=\"#statistics\">Statistics</a>\n            </li>\n            <li className=\"nav-item\">\n              <a className=\"nav-link\" href=\"#records\">History</a>\n            </li>\n          </ul>\n        </div>\n      </nav>\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}