{"version":3,"sources":["components/charts.jsx","components/search.jsx","App.js","serviceWorker.js","index.js"],"names":["ResultChart","props","state","data","isLoading","error","this","setState","axios","get","result","results","message","platforms","fake_news","real_news","Object","keys","forEach","key","push","options","title","text","chart","type","series","name","color","credits","xAxis","categories","yAxis","min","max","labels","formatter","value","plotOptions","column","dataLabels","enabled","style","textOutline","y","stacking","tooltip","highcharts","Highcharts","Component","Search","search","url","percentage","loading","e","target","currentComponent","preventDefault","formFields","post","then","response","_results","catch","analysis","className","Spinner","animation","variant","placeholder","onChange","inputChangeHandler","call","onClick","formHandler","bind","App","id","href","src","alt","scrollTargetIds","activeNavClass","offset","data-toggle","data-target","aria-controls","aria-expanded","aria-label","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"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","file":"static/js/main.e963e083.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport Highcharts from 'highcharts'\r\nimport HighchartsReact from 'highcharts-react-official'\r\nimport axios from 'axios';\r\n\r\nclass ResultChart extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      data: [],\r\n      isLoading: false,\r\n      error: null,\r\n    };\r\n  }\r\n \r\n  async componentDidMount() {\r\n    this.setState({isLoading : true});\r\n    try {\r\n      const result = await axios.get('/api/results');\r\n      this.setState({ data : result.data.results, isLoading: false});\r\n    }\r\n    catch (error) {\r\n      this.setState({ error, isLoading: false});\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { data, isLoading, error } = this.state;\r\n\r\n    if (error) {\r\n      return <p>{error.message}</p>;\r\n    }\r\n\r\n    if (isLoading) {\r\n      return <p>Loading ...</p>;\r\n    }\r\n\r\n    // TODO: To refactor\r\n    let platforms = []; let fake_news = [];  let real_news = [];\r\n    Object.keys(data).forEach(function(key) {\r\n      platforms.push(data[key]['platform']);\r\n      fake_news.push(data[key]['fake_news']);\r\n      real_news.push(data[key]['real_news']);\r\n    });\r\n\r\n    const options = {\r\n      title: { text: 'Number of falsehoods in the various social media platforms' },\r\n      chart : { type: 'column'},\r\n      series: [ \r\n        { name: 'Fake News', color: '#FB9039', data: fake_news },\r\n        { name: 'Real News', color: '#1F3044', data: real_news }\r\n      ],\r\n      \r\n      credits: false,\r\n      \r\n      xAxis: { categories: platforms},\r\n      yAxis: { min: 0, max: 100, title: { text: 'Percentage of Fake/Real News' }, labels: { formatter: function() { return this.value + '%'; } }},\r\n      \r\n      plotOptions: { \r\n        column: { \r\n          dataLabels: { enabled: true, style: { textOutline: false }, formatter: function() { return this.y + '%'; } },\r\n                stacking: 'normal',\r\n        },\r\n\r\n\r\n      },\r\n      tooltip: { formatter: function() { return this.series.name + \": \" + this.y + \"%\"; }},\r\n    }\r\n    \r\n    return ( \r\n      <HighchartsReact\r\n      highcharts={Highcharts}\r\n      options={options}\r\n    />)\r\n  }\r\n}\r\n\r\n  export default ResultChart;","import React, { Component } from 'react';\r\nimport Spinner from 'react-bootstrap/Spinner'\r\nimport axios from 'axios';\r\nimport './../App.css';\r\n\r\nclass Search extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { \r\n            search: '',\r\n            results: '',            \r\n            url: '',\r\n            percentage: 0,\r\n            loading: false\r\n        }\r\n    }\r\n\r\n\r\n    inputChangeHandler(e) {\r\n        this.setState({search: e.target.value });\r\n    }\r\n\r\n    formHandler(e) {\r\n        let currentComponent = this;\r\n        currentComponent.setState({loading: true});\r\n        e.preventDefault();\r\n        const formFields = this.state;\r\n        axios.post('/api/evaluate', formFields)\r\n            .then(function(response) {\r\n                const _results = response.data;\r\n                currentComponent.setState({loading: false})\r\n                currentComponent.setState({results: _results.results})\r\n                currentComponent.setState({url: _results.url})\r\n            })\r\n            .catch(function(error){\r\n                currentComponent.setState({loading: false})\r\n                currentComponent.setState({results: error})\r\n            })\r\n        ;\r\n    }\r\n\r\n    render() {\r\n        let analysis;\r\n        if (!this.state.results == \"\")\r\n        {\r\n            // Let's show certain elements only when used  \r\n            analysis = \r\n                <div>\r\n                    <hr className = \"mb-3\"></hr>\r\n                    <h3 className=\"mb-2\">Your result </h3> \r\n                    <h4>Link Entered: </h4>\r\n                    <p>{this.state.url}</p>\r\n                    <h4>Text: </h4>\r\n                    <p>{this.state.results}</p>\r\n                    <h4>Falsehood Probability: </h4>\r\n                    <p>{this.state.percentage}%</p>\r\n                </div>\r\n        }\r\n        if (this.state.loading) {\r\n            analysis = \r\n            <div>\r\n                <hr className = \"mb-3\"></hr>\r\n                <h3 className=\"mb-2\">Your result </h3> \r\n                <Spinner animation=\"grow\" variant=\"dark\">\r\n                <span className=\"sr-only\">Loading...</span>\r\n                </Spinner>\r\n            </div>\r\n        }\r\n        return(\r\n            <div>\r\n                <div className=\"input-group\">\r\n                        <input type=\"text\" name=\"search\" className=\"form-control\" placeholder=\"Validate your results today!\" onChange={(e) => this.inputChangeHandler.call(this, e)} value={this.state.search} />\r\n                        <span><button type=\"submit\" className = \"btn btn-primary\" onClick = {this.formHandler.bind(this)}><i className=\"fa fa-search\"></i></button></span>\r\n                </div> \r\n                {analysis}\r\n            </div>\r\n        );\r\n    }\r\n  }\r\n  \r\n  export default Search;","import React from 'react';\r\nimport './App.css';\r\n// Import charts\r\nimport ResultChart from './components/charts.jsx';\r\nimport Search from './components/search.jsx';\r\nimport Highcharts from 'highcharts/highstock'\r\nimport ScrollspyNav from \"react-scrollspy-nav\";\r\n\r\n\r\nfunction App() {\r\n  return (\r\n    \r\n    <div className=\"App\">\r\n      <div className=\"container-fluid p-0\" >\r\n        <section className=\"resume-section p-3 p-lg-5 d-flex align-items-center\" id=\"about\">\r\n          <div className=\"w-100\">\r\n            <h1 className=\"mb-0\">POFMA\r\n              <span className=\"text-primary\"> Checker</span>\r\n            </h1>\r\n            <div className=\"subheading mb-5\">\r\n              A rumour detection platform which seeks to identify falsehoods that are widely witnessed in social media.\r\n            </div>\r\n            <div className=\"subheading mb-5\">\r\n          <p className=\"lead mb-5\">\r\n            With online falsehood creating distrust and unnecessary panic in our society, a social media rumour detection platform is needed to steer users away from the dissemination of fake news. \r\n            As such, a rumour detection platform is created in hopes to address these concerns, and reduce the number of falsehood being perpetuated in the world today.\r\n          </p>\r\n          </div>\r\n          <p className=\"subheading mb-5\"></p>\r\n            <Search />\r\n          <hr className=\"mb-2\"></hr>\r\n            <div className=\"social-icons\">\r\n              <a href=\"mailto:hello@lesliecallum.com\">\r\n                <i className=\"fa fa-envelope\"></i>\r\n              </a>\r\n            </div>\r\n          </div>\r\n        </section>\r\n      </div>\r\n\r\n      <hr className=\"m-0\"></hr>\r\n      <section className=\"resume-section p-3 p-lg-5 d-flex justify-content-center\" id=\"methodology\">\r\n      <div className=\"w-100\">\r\n          <h2 className=\"mb-5\">Methodology</h2>\r\n            <div className=\"resume-item d-flex flex-column flex-md-row justify-content-between mb-5\">\r\n              <div className=\"resume-content\">\r\n                <h3 className=\"mb-0\">A React and Flask Framework</h3>\r\n                <img src=\"img/concept.png\" alt=\"framework\" className=\"responsive\"></img>\r\n                <div className = \"subheading m-1\">The Process</div>\r\n                <hr></hr>\r\n                <ol>\r\n                  <li> The web application first sends a request to Flask. </li>\r\n                  <li> Flask then communicates with the backend python modules with the parameters of the request. </li>\r\n                  <li> The backend modules then process the requests, and if necessary, pulls the data from the database.  </li>\r\n                  <li> If data is needed from the database, the data will be returned to the backend python modules. </li>\r\n                  <li> The backend modules then return the results to flask. </li>\r\n                  <li> Flask then returns the results in a JSON payload. </li>\r\n                  <li> The web application will then proceed to parse the JSON string, and visualise the results. </li>\r\n                </ol>\r\n              <div className = \"subheading m-1\">Current Limitations</div>\r\n              <hr></hr>\r\n              <ol>\r\n                <li>The current supported social media platforms as of now are: Facebook, Instagram, and Twitter.</li>\r\n                <li>The machine learning model are not updated on the fly but rather periodically due to the overheads and the ambiguity involved.</li>\r\n              </ol>\r\n              </div>\r\n              \r\n            </div>\r\n      </div>\r\n      </section>\r\n\r\n      \r\n    <ScrollspyNav scrollTargetIds ={ ['about', 'methodology', 'statistics'] } activeNavClass= \"active\" offset={0} ></ScrollspyNav>\r\n      <nav className=\"navbar navbar-expand-lg navbar-dark bg-primary fixed-top\" id=\"sideNav\">\r\n        <a className=\"navbar-brand\" href=\"#page-top\">\r\n        <span className=\"d-block d-lg-none\">pofma checker</span>\r\n        <span className=\"d-none d-lg-block\">\r\n            <img className=\"img-fluid img-profile rounded-circle mx-auto mb-2\" src=\"img/logo.png\"></img>\r\n        </span>\r\n        </a>\r\n        <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n          <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n          <ul className=\"navbar-nav\">\r\n            <li className=\"nav-item\">\r\n              <a className=\"nav-link active\" href=\"#about\">About</a>\r\n            </li>\r\n            <li className=\"nav-item\">\r\n              <a className=\"nav-link\" href=\"#methodology\">Methodology</a>\r\n            </li>\r\n            <li className=\"nav-item\">\r\n              <a className=\"nav-link\" href=\"#statistics\">Statistics</a>\r\n            </li>\r\n          </ul>\r\n        </div>\r\n      </nav>\r\n\r\n      <hr className=\"m-0\"></hr>\r\n      <section className=\"resume-section p-3 p-lg-5 d-flex align-items-left\" id=\"statistics\">\r\n      <div className=\"w-100\">\r\n            <h2 className=\"mb-5\">Statistics</h2>\r\n            <ResultChart highcharts={Highcharts} />\r\n        </div>\r\n      </section>\r\n      \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}